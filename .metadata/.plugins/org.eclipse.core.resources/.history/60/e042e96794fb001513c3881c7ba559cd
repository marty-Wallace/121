package mosaic;

import java.awt.image.BufferedImage;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.util.*;
import javax.imageio.ImageIO;

public class KenMosaicStarter
{
    //main at this point only reads in the tile images into the ArrayList.
    public static void main(String[]args) throws IOException{
        System.out.println("Reading tiles...");
		ArrayList<Tile> tileImages = getImagesFromTiles(new File("res/jpg"));
    }
    
    //This method takes in a directory, which it will read in all the tile images from.
    //It returns an ArrayList of type Tile, so that it has the file and the average colors for that image.
    private static ArrayList<Tile> getImagesFromTiles(File tilesDir) throws IOException{
		ArrayList<Tile> tileImages = new ArrayList<Tile>();
		File[] files = tilesDir.listFiles();
		for(File file : files){
			BufferedImage img = ImageIO.read(file);
			if (img != null){
			    System.out.println("Reading " + file);
				tileImages.add(new Tile(img));
			} else {
				System.err.println("null image for file " + file.getName());
			}
		}
		return tileImages;
	}
}


//A tile class to handle a single tile, with constructor calculating the average colors of the tile image
class Tile 
{
    public int averageRed;
    public int averageGreen;
    public int averageBlue;
    public BufferedImage image;
    
    //Constructor receives an image, and calculates it's average
    Tile(BufferedImage i){
        image = i;
        calculateAverage();
        System.out.println("Average RGB " + averageRed + ", " + averageGreen + ", " + averageBlue);
    }
    
    //Calculate the average RGB for the local image
    //local variables are updated, nothing is returned.
    private void calculateAverage(){
        int width          = image.getWidth();
        int height         = image.getHeight();
        long red = 0, green = 0, blue = 0;
        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                Color pixel = new Color(image.getRGB(x, y));
                red += pixel.getRed();
                green += pixel.getGreen();
                blue += pixel.getBlue();
            }
        }
        int numPixels = width * height;
        averageRed = (int)(red / numPixels);
        averageGreen = (int)(green / numPixels);
        averageBlue = (int)(blue / numPixels);
    }
}


    
